@using SixRens.UI.Blazor.Components.Sidebar
@using SixRens.UI.Blazor.Components.Pages.CaseDisplay
@using SixRens.UI.Blazor.Components.Pages.DivinationPractice
@using SixRens.UI.Blazor.Components.Pages.Introduction
@using System.Diagnostics

<PageTitle>六壬吾心</PageTitle>
<body>
<div class="page">
	<div class="SiderBar">
		<Sidebar
			OnTitleClicked="SwitchToIntroductionPage"
			OnCaseSelected="SwitchToCaseDisplayPage"/>
	</div>
	<div class="main">
		<div hidden="@(introductionParameters is null)">
			<IntroductionPage OnPracticeDivinationClicked="SwitchToDivinationPracticePage"/>
		</div>

		<div hidden="@(caseDisplayParameters is null)">
			<CaseDisplayPage Parameters="@caseDisplayParameters"/>
		</div>

		<div hidden="@(divinationPracticeParameters is null)">
			<DivinationPracticePage Parameters="divinationPracticeParameters"/>
		</div>
	</div>
</div>
</body>

@inject ILogger<Root> logger
@inject SixRens.UI.Blazor.Services.DivinationCaseStorager.DivinationCaseStorager storager
@code
{
	private object? introductionParameters;
	private CaseDisplayParameters? caseDisplayParameters;
	private DivinationPracticeParameters? divinationPracticeParameters;
	private void ClearPageParameters()
	{
		introductionParameters = null;	
		caseDisplayParameters = null;	
		divinationPracticeParameters = null;	
	}


	protected override async Task OnInitializedAsync()
	{
		ClearPageParameters();
		introductionParameters = new();
		this.StateHasChanged();
	}

	private async Task SwitchToIntroductionPage()
	{
		ClearPageParameters();
		this.introductionParameters = new();
		this.StateHasChanged();
	}

	private async Task SwitchToCaseDisplayPage(long caseId)
	{
		var c = await storager.GetCase(caseId);
		Debug.Assert(c.HasValue);
		var cV = c.Value;
		ClearPageParameters();
		this.caseDisplayParameters = new(cV.dCase, cV.name);
		this.StateHasChanged();
	}

	private async Task SwitchToDivinationPracticePage()
	{
		ClearPageParameters();
		divinationPracticeParameters = new(DateTime.Now);
		this.StateHasChanged();
	}
}