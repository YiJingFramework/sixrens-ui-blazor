@using SixRens.UI.Blazor.Components.Sidebar
@using SixRens.UI.Blazor.Components.Pages.CaseDisplay
@using SixRens.UI.Blazor.Components.Pages.DivinationPractice
@using SixRens.UI.Blazor.Components.Pages.Introduction
@using SixRens.UI.Blazor.Components.Pages.PackageError
@using System.Diagnostics

<PageTitle>六壬吾心</PageTitle>

<body>
	<div class="page" hidden="@(!OnSevereError)">
		<div hidden="@(packageErrorParameters is null)">
			<PackageErrorPage Parameters="@packageErrorParameters"
				OnProblemSolved="SwitchToIntroductionPage" />
		</div>
	</div>
	<div class="page" hidden="@(OnSevereError)">
		<div class="SiderBar">
			<Sidebar
				OnTitleClicked="SwitchToIntroductionPage"
				OnCaseSelected="SwitchToCaseDisplayPage"/>
		</div>
		<div class="main">
			<div hidden="@(introductionParameters is null)">
				<IntroductionPage Parameters="@introductionParameters"
					OnPracticeDivinationClicked="SwitchToDivinationPracticePage"/>
			</div>

			<div hidden="@(caseDisplayParameters is null)">
				<CaseDisplayPage Parameters="@caseDisplayParameters"/>
			</div>

			<div hidden="@(divinationPracticeParameters is null)">
				<DivinationPracticePage Parameters="divinationPracticeParameters"/>
			</div>
		</div>
	</div>
</body>

@inject ILogger<Root> logger
@inject SixRens.UI.Blazor.Services.DivinationCaseStorager.DivinationCaseStorager storager
@inject SixRens.UI.Blazor.Services.SixRens.ServiceOfSixRens SixRensService
@code
{
	private IntroductionParameters? introductionParameters;
	private CaseDisplayParameters? caseDisplayParameters;
	private DivinationPracticeParameters? divinationPracticeParameters;

	private PackageErrorParameters? packageErrorParameters;
	private bool OnSevereError => packageErrorParameters is not null;

	private void ClearPageParameters()
	{
		introductionParameters = null;
		caseDisplayParameters = null;
		divinationPracticeParameters = null;
		packageErrorParameters = null;
	}

	protected override async Task OnInitializedAsync()
	{
		ClearPageParameters();
		try
		{
			await SixRensService.GetPluginPackageManager();
			introductionParameters = new();
		}
		catch
		{
			packageErrorParameters = new();
		}
		this.StateHasChanged();
	}

	private async Task SwitchToIntroductionPage()
	{
		ClearPageParameters();
		this.introductionParameters = new();
		this.StateHasChanged();
	}

	private async Task SwitchToCaseDisplayPage(long caseId)
	{
		var c = await storager.GetCase(caseId);
		ClearPageParameters();
		this.caseDisplayParameters = new(c.dCase, c.name);
		this.StateHasChanged();
	}

	private async Task SwitchToDivinationPracticePage()
	{
		ClearPageParameters();
		divinationPracticeParameters = new(DateTime.Now);
		this.StateHasChanged();
	}
}