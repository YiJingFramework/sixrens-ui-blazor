@using SixRens.UI.Blazor.Components.SiderBar
@using SixRens.UI.Blazor.Components.Pages.CaseDisplay
@using SixRens.UI.Blazor.Components.Pages.DivinationPractice
@using SixRens.UI.Blazor.Components.Pages.Introduction
@using System.Diagnostics

<PageTitle>六壬吾心</PageTitle>

<div class="page">
	<SiderBar OnCaseSelected="OnCaseSelected"/>

	<div class="main" hidden="@(page is not PageDisplayState.Introduction)">
		<IntroductionPage />
	</div>

	<div class="main" hidden="@(page is not PageDisplayState.CaseDisplay)">
		<CaseDisplayPage Parameters="@caseDisplayParameters"/>
	</div>

	<div class="main" hidden="@(page is not PageDisplayState.DivinationPractice)">
		<QiKe />
	</div>
</div>

@inject ILogger<Root> logger
@inject SixRens.UI.Blazor.Services.DivinationCaseStorager.DivinationCaseStorager storager
@code
{
	private PageDisplayState page = PageDisplayState.Introduction;
	private enum PageDisplayState
	{
		Introduction,
		CaseDisplay,
		DivinationPractice
	}

	private CaseDisplayParameters? caseDisplayParameters;

	private async Task OnCaseSelected(long caseId)
	{
		page = PageDisplayState.CaseDisplay;
		var c = await storager.GetCase(caseId);
		this.caseDisplayParameters = new(c.dCase, c.name);

		this.StateHasChanged();
	}
}